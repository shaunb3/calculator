{"version":3,"sources":["components/Calculator.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["nums","digits","id","no","name","Calculator","state","history","currentDisplay","currentNumber","lastPressed","undefined","calc","prevNumber","handleClick","event","console","log","target","innerText","setState","isNaN","eval","split","last","slice","includes","prevProps","prevState","this","String","match","replace","digitArr","map","item","number","key","className","Component","Button","props","onClick","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e09c54f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from './Button'\r\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\r\nconst digits = [\r\n  {id:\"clear\",no:\"AC\",name:\"AC\"},\r\n  {id:\"divide\",no:\"/\",name:\"/\"},\r\n  {id:\"multiply\",no:\"*\",name:\"*\"},\r\n  {id:\"nine\",no:9,name:\"9\"},\r\n  {id:\"eight\",no:8,name:\"8\"},\r\n  {id:\"seven\",no:7,name:\"7\"},\r\n  {id:\"subtract\",no:\"-\",name:\"-\"},\r\n  {id:\"six\",no:6,name:\"6\"},\r\n  {id:\"five\",no:5,name:\"5\"},\r\n  {id:\"four\",no:4,name:\"4\"},\r\n  {id:\"add\",no:\"+\",name:\"+\"},\r\n  {id:\"three\",no:3,name:\"3\"},\r\n  {id:\"two\",no:2,name:\"2\"},  \r\n  {id:\"one\",no:1,name:\"1\"},\r\n  {id:\"equals\",no:\"=\",name:\"=\"},\r\n  {id:\"zero\",no:0,name:\"0\"},\r\n  {id:\"decimal\",no:\".\",name:\".\"}\r\n   \r\n]\r\n\r\n\r\nclass Calculator extends Component{\r\n\r\n  state={\r\n    history:\"0\",\r\n    currentDisplay:\"0\",\r\n    currentNumber:\"0\",\r\n    lastPressed:undefined,\r\n    calc:\"0\",\r\n    prevNumber:\"0\"\r\n  }\r\n\r\n\r\n  handleClick=(event)=>{\r\n    console.log(event.target.innerText)\r\n    \r\n    this.setState({lastPressed:event.target.innerText})\r\n    \r\n\r\n      if(isNaN(event.target.innerText)=== false){\r\n\r\n        if(this.state.currentNumber === \"0\"){\r\n          this.setState({\r\n          currentNumber:event.target.innerText\r\n          })\r\n        }\r\n\r\n        else{\r\n              this.setState({\r\n\r\n                currentNumber: this.state.currentNumber + event.target.innerText,\r\n\r\n            })\r\n        }\r\n\r\n \r\n      }\r\n\r\n\r\n      else{\r\n        switch(event.target.innerText){\r\n          \r\n          case \"AC\": this.setState({\r\n            currentNumber: \"0\",\r\n            history:\"0\"\r\n            })\r\n            break;\r\n\r\n          case \"=\": \r\n          \r\n          \r\n          console.log(\"history \"+this.state.history)\r\n          console.log(\"current \"+this.state.currentNumber)\r\n\r\n          this.setState({\r\n             \r\n            currentNumber: eval( this.state.currentNumber),\r\n            history: this.state.currentNumber\r\n            })\r\n            break;\r\n\r\n            case \".\":\r\n            const {currentNumber} = this.state\r\n\r\n            let split = currentNumber.split(/[\\+\\-\\*\\/]/)\r\n            let last =split.slice(-1)[0]\r\n\r\n\r\n              if(!last.includes(\".\")){\r\n                this.setState({currentNumber:currentNumber+ event.target.innerText})\r\n              }\r\n            \r\n            break;\r\n\r\n\r\n            case \"+\":\r\n            case \"*\":\r\n            case \"/\":\r\n            case \"-\":\r\n\r\n \r\n            \r\n\r\n             if(this.state.lastPressed===event.target.innerText){\r\n              \r\n            }\r\n            else{\r\n                this.setState({currentNumber:this.state.currentNumber+ event.target.innerText})\r\n\r\n            }\r\n            \r\n            break;            \r\n\r\n        default:\r\n\r\n        \r\n            \r\n        }\r\n            \r\n      }\r\n  }\r\n    \r\n    \r\n componentDidUpdate(prevProps,prevState) {\r\n  // Typical usage (don't forget to compare props):\r\n  if (this.state.currentNumber !== prevState.currentNumber) {\r\n    if(String(this.state.currentNumber).match(/[\\+\\-\\*\\/]{3,}/)){\r\n        \r\n        this.setState({currentNumber:this.state.currentNumber.replace(/[\\+\\-\\*\\/]{3,}/, this.state.lastPressed)})\r\n      }\r\n\r\n      console.log(\"currentNo\"+this.state.currentNumber)\r\n  }\r\n\r\n\r\n}\r\n\r\n  \r\n  //---------------------------------------\r\n  render(){\r\n     const digitArr= digits.map((item)=>{\r\n        return(\r\n          <Button id={item.id} number={item.no} name={item.name} key={item.id} handleClick={this.handleClick}/>\r\n        )\r\n      })\r\n  //---------------------------------------\r\n    return(\r\n      <div className=\"calc-con\">\r\n      \r\n      <div id=\"display\">\r\n        \r\n        <div className=\"display-digits\">\r\n        <div className=\"history\">{this.state.history}</div>\r\n          {this.state.currentNumber}\r\n        </div>\r\n      \r\n      </div>\r\n      {digitArr}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Calculator","import React, {Component} from 'react';\r\n\r\n\r\nclass Button extends Component{\r\n\r\n\r\n  \r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <div id={this.props.id} \r\n        key={this.props.id} \r\n        className=\"digit\"\r\n        onClick={this.props.handleClick}>\r\n        {this.props.name}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Button","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Calculator from './components/Calculator'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Calculator />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}